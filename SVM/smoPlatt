# author: Kitahara Kazusa
# date: 2021/2/19

from numpy import *
import random
import matplotlib.pyplot as plt

def loadDataset():
    fp = open(r'C:\Users\86519\Desktop\ML\6.SVM\testSet.txt')
    dataList = []
    labelList = []
    for line in fp.readlines():
        lineArr = line.strip().split('\t')
        dataList.append([float(lineArr[0]), float(lineArr[1])])
        labelList.append(float(lineArr[2]))
    return dataList, labelList

class optStruct:
    def __init__(self, dataMatrix, labelMatrix, C, fToler):
        self.dataM = dataMatrix
        self.labelM = labelMatrix
        self.C = C
        self.tol = fToler
        self.m = shape(dataMatrix)[0]
        self.alphaVec = mat(zeros((self.m, 1)))
        self.b = 0
        self.errCache = mat(zeros((self.m, 2))) # 第一列为标志位，第二列为值

def adjustAlpha(alpha, upperbound, lowerbound):
    if alpha > upperbound:
        alpha = upperbound
    if alpha < lowerbound:
        alpha = lowerbound
    return alpha

def calErri(oS, i):
    # fXi = (multiply(alphaVec, labelMatrix).T * dataMatrix) * dataMatrix[i].T + b
    fXi = (multiply(oS.alphaVec, oS.labelM).T * oS.dataM) * oS.dataM[i].T + oS.b
    Ei = fXi - float(oS.labelM[i])
    return Ei

def randSelect(i, m):
    j = i
    while(j == i):
        j = int(random.uniform(0, m))
    return j

def selectJ(i, oS, Ei):
    maxK = -1; maxDeltaErr = 0; Ej = 0
    oS.errCache[i] = [1, Ei]
    validErrCacheList = nonzero(oS.errCache[:, 0].A)[0] # 返回非零E值所对应的alpha，这里的有效即为非零
    if (len(validErrCacheList)) > 1:
        for k in validErrCacheList:
            if k == i:
                continue
            Ek = calErri(oS, k)
            deltaErr = abs(Ei - Ek)
            if (deltaErr > maxDeltaErr):
                maxK = k
                maxDeltaErr = deltaErr
                Ej = Ek
        return maxK, Ej
    else:
        j = randSelect(i, oS.m)
        Ej = calErri(oS, j)
    return j, Ej

def updateEk(oS, k):
    Ek = calErri(oS, k)
    oS.errCache[k] = [1, Ek]

def innerLoop(i, oS):
    Ei = calErri(oS, i)
    if ((oS.labelM[i] * Ei < -oS.tol) and (oS.alphaVec[i] < oS.C))\
        or ((oS.labelM[i] * Ei > oS.tol) and (oS.alphaVec[i] > 0)):
        j, Ej = selectJ(i, oS, Ei)
        alphaIOld = oS.alphaVec[i].copy()
        alphaJOld = oS.alphaVec[j].copy()
        if (oS.labelM[i] != oS.labelM[j]):
            lower = max(0, oS.alphaVec[j] - oS.alphaVec[i])
            upper = min(oS.C, oS.C + oS.alphaVec[j] - oS.alphaVec[i])
        else:
            lower = max(0, oS.alphaVec[j] + oS.alphaVec[i] - oS.C)
            upper = min(oS.C, oS.alphaVec[j] + oS.alphaVec[i])
        theta = 2.0 * oS.dataM[i] * oS.dataM[j].T\
            - oS.dataM[i] * oS.dataM[i].T\
            - oS.dataM[j] * oS.dataM[j].T
        if (theta >= 0):
            print('thate >= 0')
            return 0
        oS.alphaVec[j] += oS.labelM[j] * (Ej - Ei) / theta
        oS.alphaVec[j] = adjustAlpha(oS.alphaVec[j], upper, lower)
        updateEk(oS, j)
        if (abs(alphaJOld - oS.alphaVec[j]) < 0.00001):
            print('j not moving enough')
            return 0
        oS.alphaVec[i] += oS.labelM[j] * oS.labelM[i] * (alphaJOld - oS.alphaVec[j])
        updateEk(oS, i)

        b1 = oS.b - Ei - oS.labelM[i] * (oS.alphaVec[i] - alphaIOld) \
             * oS.dataM[i] * oS.dataM[i].T - oS.labelM[j] * (oS.alphaVec[j] - alphaJOld) \
             * oS.dataM[i] * oS.dataM[j].T
        b2 = oS.b - Ej - oS.labelM[i] * (oS.alphaVec[i] - alphaIOld) \
             * oS.dataM[i] * oS.dataM[j].T - oS.labelM[j] * (oS.alphaVec[j] - alphaJOld) \
             * oS.dataM[j] * oS.dataM[j].T
        if (0 < oS.alphaVec[i]) and (oS.alphaVec[i] < oS.C):
            oS.b = b1
        elif (0 < oS.alphaVec[j]) and (oS.alphaVec[j] < oS.C):
            oS.b = b2
        else:
            oS.b = (b1 + b2) / 2.0
        return 1
    else:
        return 0

def smoPlatt(dataList, labelList, C, fToler, iterTime, kTup=('lin',0)):
    oS = optStruct(mat(dataList), mat(labelList).T, C, fToler)
    iterCnt = 0
    entireSet = True
    alphaPairsChanged = 0
    while (iterCnt < iterTime) and ((alphaPairsChanged > 0) or (entireSet)):
        alphaPairsChanged = 0
        if entireSet:
            for i in range(oS.m):
                alphaPairsChanged += innerLoop(i, oS)
                print('fullSet, iter: %d i: %d, pairs changed %d' % \
                      (iterCnt, i, alphaPairsChanged))
            iterCnt += 1
        else:
            nonBoundIs = nonzero((oS.alphaVec.A > 0) * (oS.alphaVec.A < C))[0]
            for i in nonBoundIs:
                alphaPairsChanged += innerLoop(i, oS)
                print('non-bound, iter: %d i: %d, pairs changed %d' % \
                      (iterCnt, i, alphaPairsChanged))
            iterCnt += 1
        if entireSet:
            entireSet = False
        elif (alphaPairsChanged == 0):
            entireSet = True
        print('Iteration number: %d' % iterCnt)
    return oS.b, oS.alphaVec

def calW(alphaVec, dataList, labelList):
    dataMatrix = mat(dataList)
    labelMatrix = mat(labelList).T
    m, n = shape(dataMatrix)
    w = zeros((n, 1))
    for i in range(m):
        w += multiply(alphaVec[i] * labelMatrix[i], dataMatrix[i].T)
    return w

if __name__ == '__main__':
    dataList, labelList = loadDataset()
    dataMatirx = mat(dataList)
    labelMatrix = mat(labelList)

    b, alphaVec = smoPlatt(dataList, labelList, 0.6, 0.001, 40)
    w = calW(alphaVec, dataList, labelList)

    if 1:
        n = shape(dataList)[0]
        xcord1 = []; ycord1 = []
        xcord2 = []; ycord2 = []
        for i in range(n):
            if int(labelList[i]) == 1:
                xcord1.append(dataList[i][0])
                ycord1.append(dataList[i][1])
            else:
                xcord2.append(dataList[i][0])
                ycord2.append(dataList[i][1])
        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.scatter(xcord1, ycord1, s=30, c='red', marker='s')  # scatter用于绘制x,y所表示的点
        ax.scatter(xcord2, ycord2, s=30, c='green')
        x = [arange(-1, 10, 0.1)]
        y = (- b - w[0] * mat(x)) / w[1]
        plt.plot(x, y, 'k.-')
        plt.show()
